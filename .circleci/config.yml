version: 2.1
commands:
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            apt update
            apt install software-properties-common -y
            add-apt-repository --yes --update ppa:ansible/ansible
            apt install ansible -y
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  destroy-environment:
    description: Destroy whole environment
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: "string"
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --force
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.workflow_id >>)
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm install
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Front-end test build
          command: |
              cd frontend
              npm install
              npm run test

      
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Back-end test build
          command: |
              cd backend
              npm install
              npm run test  
        
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Front-end scan build
          command: |
              cd frontend
              npm install
              npm audit fix --force --audit-level=critical
              npm audit fix --force --audit-level=critical
              npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Back-end scan build
          command: |
              cd backend
              npm install
              npm audit fix --force --audit-level=critical 
              npm audit fix --force --audit-level=critical
              npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Fetch public IP and append in inventory file
          command: |
            public_IP_backend=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $public_IP_backend >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["84:ae:3c:7f:f1:a9:48:2f:a0:5e:b1:32:e4:da:e0:76"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install ansible.
          command: |
            apk add --update ansible
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update tar gzip ansible nodejs npm curl && \
            pip install awscli

      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible && \
            cat inventory.txt && \
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - install_awscli

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations   
       
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]   
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]    
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]  
      - run-migrations:
          requires: [configure-infrastructure] 